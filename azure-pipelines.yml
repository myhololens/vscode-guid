# The MIT License (MIT)
#
# Copyright (c) Heath Stewart
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

trigger:
  batch: true
  branches:
    include:
    - master
    - develop

pr:
  branches:
    include:
    - master
    - develop

jobs:
- job: Build
  strategy:
    matrix:
      linux:
        platform: linux
        vmImage: ubuntu-16.04
      mac:
        platform: mac
        vmImage: macos-10.13
      windows:
        platform: windows
        vmImage: vs2017-win2016

  pool:
    vmImage: $(vmImage)

  variables:
    npm_config_cache: $(Pipeline.Workspace)/.npm

  steps:
  - checkout: self
    lfs: true

  - task: NodeTool@0
    displayName: Use Node 10.x
    inputs:
      versionSpec: 10.x

  - task: CacheBeta@0
    displayName: Cache packages
    inputs:
      key: npm | $(Agent.OS) | package-lock.json
      path: $(npm_config_cache)

  - script: npm ci
    displayName: Install dependencies

  - task: Gulp@0
    displayName: Compile
    inputs:
      targets: set-version compile
      arguments: --series

  - script: |
      set -e
      /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
      disown -ar
    displayName: Start Xvfb
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

  - script: |
      node ./out/test/runTest.js
    displayName: Test (stable)
    env:
      DISPLAY: :10
      TEST_RESULTS_PATH: $(System.DefaultWorkingDirectory)/.vscode-test/stable/test-results.xml

  - task: PublishTestResults@2
    displayName: Publish test results (stable)
    inputs:
      testResultsFiles: $(System.DefaultWorkingDirectory)/.vscode-test/stable/test-results.xml
      testRunTitle: $(platform)-stable
      buildPlatform: $(platform)
    condition: succeededOrFailed()

  - script: |
      node ./out/test/runTest.js
    displayName: Test (insiders)
    env:
      CODE_VERSION: insiders
      DISPLAY: :10
      TEST_RESULTS_PATH: $(System.DefaultWorkingDirectory)/.vscode-test/insiders/test-results.xml

  - task: PublishTestResults@2
    displayName: Publish test results (insiders)
    inputs:
      testResultsFiles: $(System.DefaultWorkingDirectory)/.vscode-test/insiders/test-results.xml
      testRunTitle: $(platform)-insiders
      buildPlatform: $(platform)
    condition: succeededOrFailed()

  - script: |
      npm install -g vsce
    displayName: Install vsce
    condition: and(succeeded(), eq(variables['platform'], 'linux'))

  - script: |
      vsce package -o "$(Build.ArtifactStagingDirectory)/vscode-guid-$(Build.BuildNumber).vsix"
    displayName: Package
    condition: and(succeeded(), eq(variables['platform'], 'linux'))

  - publish: $(Build.ArtifactStagingDirectory)
    artifact: drop
    displayName: Publish drop
    condition: and(succeeded(), eq(variables['platform'], 'linux'))

  # Need to persist Build.BuildNumber since subsequent jobs are unaffected (agent-scoped).
  - script: |
      echo "Persisting BuildNumber: $BUILD_BUILDNUMBER"
      echo "##vso[task.setvariable variable=BuildNumber;isOutput=true]$BUILD_BUILDNUMBER"
    displayName: Persist variables
    name: vars
    condition: and(succeeded(), eq(variables['platform'], 'linux'))

- job: Deploy
  dependsOn: Build
  condition: >-
    and(
      succeeded(),
      eq(variables['Publish'], 'true'),
      in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/develop'),
      in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI')
    )

  pool:
    vmImage: ubuntu-16.04

  variables:
    BuildNumber: $[dependencies.Build.outputs['linux.vars.BuildNumber']]
    Prerelease: $[ne(variables['Build.SourceBranch'], 'refs/heads/master')]

  steps:
  - checkout: none

  - script: |
      echo Setting BuildNumber: $BUILDNUMBER
      echo ##vso[build.updatebuildnumber]$BUILDNUMBER
    displayName: Set variables
    env:
      BUILDNUMBER: $(BuildNumber)

  - task: NodeTool@0
    displayName: Use Node 10.x
    inputs:
      versionSpec: 10.x

  - download: current
    artifact: drop
    patterns: '**/*.vsix'
    displayName: Download drop

  - task: GitHubRelease@0
    displayName: Create release
    inputs:
      gitHubConnection: GitHub
      repositoryName: heaths/vscode-guid
      tagSource: manual
      tag: v$(BuildNumber)
      assets: |
        $(Pipeline.Workspace)/drop/**/*.vsix
      isPreRelease: $(Prerelease)

  # Only publish to Marketplace from master.
  - script: |
      npm install -g vsce
    displayName: Install vsce
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - script: |
      shopt -s globstar nocaseglob nocasematch nullglob
      for fname in $(Pipeline.Workspace)/drop/**/*.vsix; do
        if [ -f "$fname" ]; then
          echo Publishing: $fname
          vsce publish -p $(Marketplace.AccessToken) --packagePath $fname
        fi
      done
    displayName: Publish extension
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
